<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	<!-- class :  클래스를 가져다가 Spring Bean으로 등록 -->
	<!--  id : 식별자(필수 아님) -->
	<!-- init-method 속성 : Spring Bean 객체로 생성 후 한번만 호출되어 초기화 작업을 
		실행하기 위한 메소드명을 속성값으로 설정 => 자동 완성 기능 사용 가능 -->
	<!-- destroy-method 속성 : Spring Bean 객체로 소멸 전 한번만 호출되어 마무리 작업을 
		실행하기 위한 메소드명을 속성값으로 설정 => 자동 완성 기능 사용 가능 -->
	<bean class="xyz.itwill04.bean.InitDestroyMethodBean" id="initDestroyMethodBean"
		init-method="init" destroy-method="destroy" />
		<!-- 무조건 먼저 객체를 생성하게 하는게 아니라 속성값으로 조절 가능 -->
	
	<!-- lazy-init 속성 : false 또는 true 중 하나를 속성값으로 설정 -->
	<!--  => false : Spring Bean 객체 미리 생성, true : Spring Bean 객체 사용시 생성(getBean시에) -->
	<!--  => lazy-init 속성값을 true로 설정한 경우 getBean() 메소드를 호출 시 String Bean 객체 생성 -->
	<bean class="xyz.itwill04.bean.LazyInitBean" id="lazyInitBean" lazy-init="true"/>
	
	<!-- 싱글톤 클래스 : 프로그램에 객체를 하나만 제공하기 위해 작성된 클래스 -->
	<!-- Spring Container는 리플렉션 기능을 이용하여 객체를 생성 -->
	<!--  => 생성자가 은닉화 선언되어 있어도 리플렉션 기능에 의해 생성자 사용 가능 -->
	<!-- 리플렉션 기능에 의해 클래스가 메모리에 저장된 후 정적영역의 명령으로 객체 생성 -->
	<!--  => 2개의 객체가 생성된다.(스프링 컨테이너에 의해 생성된 객체 1개 + 메모리 로딩 후 정적영역에서 생성된 객체 1개) -->
	<!-- factory-method 속성 : 싱글톤 클래스에서 객체를 반홚하는 메소드명을 속성값으로 설정 -->
	<!--  => Spring Container에 의해 객체를 생성하지 않고 정적영역에서 생성된 객체를 Spring Bean 객체로 사용 -->
	<bean class="xyz.itwill04.bean.FactoryMethodBean" factory-method="getFactoryMethodBean"/>
	
	<!-- Spring Container는 bean 엘리먼트 선언 순서대로 등록된 클래스를 Spring Bean 객체 생성한다. -->
	<!-- depends-on 속성 : 다른 bean 엘리먼트의 beanName을 속성값으로 설정 -->
	<!--  => 속성값으로 설정된 bean 엘리먼트의 클래스를 먼저 String Bean 객체로 생성 -->
	<!--  => depends-on="id" 먼저 만들고 날 만들어주세여 -->
	<bean class="xyz.itwill04.bean.DependsOnOneBean" depends-on="dependsOnTwoBean"/>
	<bean class="xyz.itwill04.bean.DependsOnTwoBean" id="dependsOnTwoBean"/>
	
	<!-- scope 속성 : Spring Bean 객체의 생성 갯수(singleton : 기본 또는 prototype) 또는 
			사용범위(request 또는 session => 웹프로그램) 중 하나를 속성값으로 설정 -->
	<!-- scope 속성값으로 singleton으로 설정한 경우 bean 엘리먼트에 의해 등록된 클래스로
			Spring Bean 객체를 하나만 생성하여 제공 -->
	<bean class="xyz.itwill04.bean.ScopeBean" id="singleton" lazy-init="true" scope="singleton"/>
	
	<!-- scope 속성값으로 prototype으로 설정한 경우 bean 엘리먼트에 의해 등록된 클래스로
			Spring Bean 객체를 여러개 생성하여 제공 -->
	<!--  => 반드시 lazy-init 속성값을 true로 설정해야 한다. -->
	<!--  => 만들어 달라고 할때마다 만들어줌 -->
	<bean class="xyz.itwill04.bean.ScopeBean" id="prototype" lazy-init="true" scope="prototype"/>
</beans>
