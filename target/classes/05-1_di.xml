<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- 기본 생성자를 이용하여 Spring Bean 갹체 생성 - 필드에는 기본값(Default) 저장 -->
	<bean class="xyz.itwill05.di.Student" id="student1"/>
	
	<!-- 매개변수(학번)가 선언된 생성자를 이용하여 Spring Bean 갹체 생성 -->
	<!--  => 생성자의 매개변수에 값을 전달받아 필드에 저장 >> 필드 초기화 -->
	<!--  => 생성자를 이용하여 필드 초기화 - Constructor Injection -->
	<bean class="xyz.itwill05.di.Student" id="student2">
		<!-- constructor-arg : 생성자 매개변수에 값(객체)를 전달하기 위한 엘리먼트 -->
		<!--  => 엘리먼트의 갯수만큼 매개변수가 선언된 생성자가 반드시 선언 -->
		<!-- value 속성 : 매개변수에 전달할 값을 속성값으로 설정 >> Value Injection -->
		<!--  => 전달값은 기본적으로 문자열(String)로 전달 >> 매개변수의 자료형에 따라 자동 형변환 -->
		<!--  => 전달값이 자동으로 형변환될 때 예외 발생 가능 >> 값의 형태가 맞지않으면 예외 발생 -->
		<constructor-arg value="1000"/>
		<!-- constructor-arg가 선언된 만큼의 매개변수가 선언되어 있는 생성자를 호출 -->
		<!--  => ex) constructor-arg 2개라면 >> 매개변수도 2개인 생성자 호출 -->
	</bean>
	
	<!-- constructor-arg 엘리먼트 순서에 의해 매개변수에 값(객체)이 차례대로 전달되어 저장 -->
	<!-- 
	<bean class="xyz.itwill05.di.Student" id="student3">
		<constructor-arg value="2000"/>
		<constructor-arg value="홍길동"/>
		<constructor-arg value="abc@abc.com"/>
	</bean>
	 -->
	 
	 <bean class="xyz.itwill05.di.Student" id="student3">
	 	<!-- index 속성 : 전달값이 저장될 생성자 매개변수의 순서를 속성값으로 설정 -->
	 	<!--  => 속성값은 0부터 1씩 증가되는 정수값 사용 -->
		<constructor-arg value="abc@abc.com" index="2"/>
		<constructor-arg value="홍길동" index="1"/>
		<constructor-arg value="2000" index="0"/>
	</bean>

	<!-- 기본 생성자를 이용하여 Spring Bean 객체 생성 >> 필드에는 기본값 저장 -->
	<!--  => Setter 메소드를 호출하여 필드값 변경 >> Setter Injection -->
	<!--  => 기본 생성자 호출 >> Setter 메소드 호출 -->
	<bean class="xyz.itwill05.di.Student" id="student4">
		<!-- property : 필드의 Setter 메소드를 호출하여 필드값 변경하는 엘리먼트 -->
		<!-- name 속성 : 값을 변경할 필드명을 속성값으로 설정 >> 자동 완성 기능 제공 -->
		<!-- value 속성 : Setter 메소드의 매개변수에 전달할 값을 속성값으로 설정 >> Value Injection -->
		<property name="num" value="3000"/>
		<property name="name" value="임꺽정"/>
		<property name="email" value="xyz@xyz.com"/>
	</bean>	
	
	<!-- Constructor Injection과 Setter Injection을 같이 사용하여 필드값 설정 -->
	<bean class="xyz.itwill05.di.Student" id="student5">
		<!-- 매개변수가 2개인 생성자 호출 후 Setter 메소드를 이용하여 email 설정 -->
		<constructor-arg value="4000"/>
		<constructor-arg value="전우치"/>
		<property name="email" value="aop@aop.com"/>
	</bean>
	
	<!-- PropertyPlaceholderConfigurer : Properties 파일의 값을 제공 받아 
		Bean Configuration File에서 사용할 수 있는 기능을 제공하는 클래스 -->
	<!--  => locations 필드에는 Properties 파일의 경로 전달하여 저장 -->
	<!--  => Bean Configuration File에서는 ${key} 형식으로 표현하여 값을 제공받아 사용 -->
	<!-- 
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" value="site/itwill05/di/student.properties"></property>
	</bean>
	 -->
	 
	 <!-- Spring 5.2 이상에서는 PropertySourcesPlaceholderConfigurer 클래스 사용 권장 -->
	<bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
		<property name="locations" value="xyz/itwill05/di/student.properties"/>
	</bean>
	
	<bean class="xyz.itwill05.di.Student" id="student6">
		<property name="num" value="${num}"/>
		<property name="name" value="${name}"/>
		<property name="email" value="${email}"/>
	</bean>
	
	<!-- DAO 클래스를 Spring Bean으로 등록 -->
	<bean class="xyz.itwill05.di.StudentJdbcDAO" id="studentJdbcDAO"/>
	<!-- Mybatis DAO 등록 -->
	<bean class="xyz.itwill05.di.StudentMybatisDAO" id="studentMybatisDAO"/>
	
	<!-- Service 클래스를 Spring Bean으로 등록 -->
	<!--  => 기본 생성자를 이용하여 Spring Bean 객체 생성 : 필드에 기본값 저장 >> 포함관계 미설정 -->
	<!--  => 필드에 null이 저장된 상태에서 메소드를 호출할 경우 NullPointerException 발생 -->
	<!-- <bean class="xyz.itwill05.di.StudentServiceImpl" id="studentServiceImpl"/> -->
	
	<!-- 매개변수가 선언된 생성자를 이용하여 Spring Bean 객체 생성 -->
	<!--  => 생성자 매개변수에 객체(Spring Bean)를 전달하여 포함(의존)관계 구현 >> Constuctor Injection -->
	<!-- ref 속성 : 매개변수에 전달할 Spring Bean의 beanName을 속성값으로 설정(참조할) >> Dependency Injection(의존성 주입) -->
	<!-- 
	<bean class="xyz.itwill05.di.StudentServiceImpl" id="studentServiceImpl">
		 매개변수를 넣어줌으로서 매개변수가 있는 생성자가 생성되도록
		<constructor-arg ref="studentJdbcDAO"/>
	</bean>
	 -->
	 
	 <!-- 기본 생성자를 이용하여 Spring Bean 객체 생성 >> 필드에는 기본값(NULL) 저장 -->
	 <!--  => property 엘리먼트를 사용하여 Setter 메소드를 호출해 의존관계 구현 >> Setter Injection  -->
	 <!-- 
	 <bean class="xyz.itwill05.di.StudentServiceImpl" id="studentServiceImpl">
	 	<property name="studentJdbcDAO" ref="studentJdbcDAO"/>
	 </bean>
	  -->
	  
	  <!-- Property 엘리먼트의 ref 속성값을 변경하면 의존관계가 변경 -->
	  <!--  => 프로그램이 아닌 Bean Configuration File을 이용하여 의존관계 설정 및 변경 -->
	 <bean class="xyz.itwill05.di.StudentServiceImpl" id="studentServiceImpl">
	 	<!-- <property name="studentDAO" ref="studentJdbcDAO"/> -->
	 	<property name="studentDAO" ref="studentMybatisDAO"/>
	 </bean>
</beans>
