<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- 컨텍스트에 존재하는 모든(Front Controller) 클래스에서 사용할 수 있도록 Spring Bean을 등록하는 Bean Configuration File -->
	<!--  => DAO 클래스 작성에 필요한 클래스를 Spring Bean으로 등록 -->
	<!--  => DataSource, JdbcTemplate, SqlSessionFactory, SqlSession, TransactionManager 등 -->
	
	<!-- DataSource 관련 클래스를 Spring Bean으로 등록 -->
	<!--  => Connection 객체를 생성하기 위한 정보를 필드에 인젝션 처리 -->
	<!-- 
	<bean class="org.springframework.jdbc.datasource.DriverManagerDataSource" id="dataSource">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/>
		<property name="username" value="c##lamge"/>
		<property name="password" value="1234"/>
	-->
	
	<!-- driverClassName 필드와 url 필드를 log4jdbc-log4j2-jdbc4 라이브러리에서 ??? 값으로 인젝션 처리 -->
	<bean class="org.springframework.jdbc.datasource.DriverManagerDataSource" id="dataSource">	
		<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"/>
		<property name="url" value="jdbc:log4jdbc:oracle:thin:@localhost:1521:xe"/>
		<property name="username" value="c##lamge"/>
		<property name="password" value="1234"/>
	</bean>
	
	<bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactoryBean">
		<!-- configLocation 필드에는 Mybatis 환경설정파일의 경로를 인젝션 처리 -->
		<!-- SpringMVC에서 사용하는 Spring Container(WebApplicationContext 객체)는 [src/main/webapp] 폴더(/)의 자원에만 접근 가능 -->
		<!-- [src/main/java] 또는 [src/main/resources] 폴더에 작성된 자원에 접근하기 위해서는 classpath 접두사를 이용 -->
		<!-- <property name="configLocation" value="/WEB-INF/spring/mybatis-config.xml"/> -->
		<!--  => 원래는 spring 폴더 안에 만드는 것이 정석 -->
		
		<!-- 패키지에 자원이 작성된 경우 파일 시스템 경로로 표현 -->
		<!-- <property name="configLocation" value="classpath:xyz/itwill/xml/mybatis-config.xml"/> -->
		<!--  => 리소시스 영역에 작성할 경우 classpath: 작성 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
		
		<!-- dataSource 필드에 DataSource 관련 Spring Bean 인젝션 처리 -->
		<!--  => mybatis 환경설정파일의 environments 엘리먼트 생략 -->
		<property name="dataSource" ref="dataSource"/>
		
		<!-- typeAliasesPackage 필드에 DTO 클래스를 작성하는 패키지를 인젝션 처리 -->
		<!--  => mybatis 환경설정파일의 typeAliases 엘리먼트 생략 -->
		<property name="typeAliasesPackage" value="xyz.itwill10.dto"/>
		
		<!-- mapperLocations 필드에 XML 맵퍼 파일 List 객체의 요소로 인젝션 처리 -->
		<!--  => * 기호를 사용하여 다수의 XML 파일을 매퍼로 등록 -->
		<!--  => mybatis 환경설정파일의 mappers 엘리먼트 생략 -->
		<property name="mapperLocations">
			<list>
				<value>classpath:xyz/itwill10/mapper/*.xml</value>
			</list>
		</property>
	</bean>
	
	<!-- SqlSession 관련 클래스를 Spring Bean으로 등록 -->
	<!--  => destroy-method 속성에 clearCache 메소드를 속성값으로 설정 -->
	<!-- clearCache 메소드 : SqlSession 객체를 소멸시키는 메소드 -->
	<bean class="org.mybatis.spring.SqlSessionTemplate" id="sqlSession" destroy-method="clearCache">
		<!-- 기본생성자가 없기 때문에 무조건 해주어야함 >> 없으면 에러 떠러짐 -->
		<!-- 생성자를 이용하여 SqlSessionFactoryBean 클래스의 Spring Bean를을 인젝션 처리 -->
		<constructor-arg ref="sqlSessionFactoryBean"/>
	</bean>
	
	<!-- TransactionManager 관련 클래스를  Spring Bean으로 등록  -->
	<!--  => beanName을 반드시 transactionManager로 설정 >> RollBack 처리 시 사용 -->
	<bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="transactionManager">
		<!-- dataSource 필드에 DataSource 관련 Spring Bean을 인젝션 처리 -->
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!-- annotation-driven : @Transactional 어노테이션을 이용하여 TransactionManager 관련 Spring Bean으로 트렌젝션 처리 기능을 제공하는 엘리먼트 -->
	<tx:annotation-driven/>
	
</beans>
